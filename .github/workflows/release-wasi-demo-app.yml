# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: Release wasi-demo-app
run-name: wasi-demo-app@${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version of the image to release. (e.g., 1.2.3)"
        type: string
        required: true
      dry_run:
        description: "Run the release without actually releasing bits"
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  release-wasi-demo:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    outputs:
      wasi_demo_app_digest: ${{ steps.get_digests.outputs.wasi_demo_app_digest }}
      wasi_demo_oci_digest: ${{ steps.get_digests.outputs.wasi_demo_oci_digest }}
      wasi_demo_oci_artifact_digest: ${{ steps.get_digests.outputs.wasi_demo_oci_artifact_digest }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup build env
        run: ./scripts/setup-linux.sh
      - name: Install Rust and wasm32-wasi target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-wasip1
          override: true

      - name: Convert repository name to lowercase
        id: prep
        run: echo "::set-output name=repo::$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"

      - name: login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: enable containerd image store
        run: |
          echo '{ "features": { "containerd-snapshotter": true } }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'
      
      - name: Build oci tarballs
        run: |
          make docker/load
          make docker/load/oci
          docker image ls

      - name: Tagging images
        run: |
          docker tag ghcr.io/containerd/runwasi/wasi-demo-app:latest ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-app:${{ inputs.version }}
          docker tag ghcr.io/containerd/runwasi/wasi-demo-app:latest ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-app:latest

          docker tag ghcr.io/containerd/runwasi/wasi-demo-oci:latest ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci:${{ inputs.version }}
          docker tag ghcr.io/containerd/runwasi/wasi-demo-oci:latest ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci:latest

          docker tag ghcr.io/containerd/runwasi/wasi-demo-oci-artifact:latest ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci-artifact:${{ inputs.version }}
          docker tag ghcr.io/containerd/runwasi/wasi-demo-oci-artifact:latest ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci-artifact:latest
      
      - name: Push images to ghcr.io
        if: ${{ inputs.dry_run == false }}
        run: |
          docker push ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-app:${{ inputs.version }}
          docker push ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-app:latest

          docker push ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci:${{ inputs.version }}
          docker push ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci:latest

          docker push ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci-artifact:${{ inputs.version }}
          docker push ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci-artifact:latest

      - name: Display image digests
        id: get_digests
        run: |
          digest_wasi_demo_app=$(docker inspect ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-app --format '{{ .Id }}' --type image)
          echo "Digest for wasi-demo-app: $digest_wasi_demo_app"
          echo "wasi_demo_app_digest=$digest_wasi_demo_app" >> $GITHUB_OUTPUT

          digest_wasi_demo_oci=$(docker inspect ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci --format '{{ .Id }}' --type image)
          echo "Digest for wasi-demo-oci: $digest_wasi_demo_oci"
          echo "wasi_demo_oci_digest=$digest_wasi_demo_oci" >> $GITHUB_OUTPUT

          digest_wasi_demo_oci_artifact=$(docker inspect ghcr.io/${{ steps.prep.outputs.repo }}/wasi-demo-oci-artifact --format '{{ .Id }}' --type image)
          echo "Digest for wasi-demo-oci-artifact: $digest_wasi_demo_oci_artifact"
          echo "wasi_demo_oci_artifact_digest=$digest_wasi_demo_oci_artifact" >> $GITHUB_OUTPUT

  sign-wasi-demo-app:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    uses: ./.github/workflows/sign.yml
    with:
      image-name: "wasi-demo-app"
      image-digest: ${{ needs.release-wasi-demo.outputs.wasi_demo_app_digest }}

  sbom-wasi-demo-app:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    uses: ./.github/workflows/sbom.yml
    with:
      image-name: "wasi-demo-app"
      image-digest: ${{ needs.release-wasi-demo.outputs.wasi_demo_app_digest }}
      
  
  sign-wasi-demo-oci:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    uses: ./.github/workflows/sign.yml
    with:
      image-name: "wasi-demo-oci"
      image-digest: ${{ needs.release-wasi-demo.outputs.wasi_demo_oci_digest }}
      
  
  sbom-wasi-demo-oci:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    uses: ./.github/workflows/sbom.yml
    with:
      image-name: "wasi-demo-oci"
      image-digest: ${{ needs.release-wasi-demo.outputs.wasi_demo_oci_digest }}
      
    
  sign-wasi-demo-oci-artifact:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    uses: ./.github/workflows/sign.yml
    with:
      image-name: "wasi-demo-oci-artifact"
      image-digest: ${{ needs.release-wasi-demo.outputs.wasi_demo_oci_artifact_digest }}
      
  
  sbom-wasi-demo-oci-artifact:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    uses: ./.github/workflows/sbom.yml
    with:
      image-name: "wasi-demo-oci-artifact"
      image-digest: ${{ needs.release-wasi-demo.outputs.wasi_demo_oci_artifact_digest }}
