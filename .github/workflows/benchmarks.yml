name: Run Benchmarks

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  pull_request:
    
jobs:
  benchmark:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: fetch submodules
        run: git submodule update --init --recursive
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: '' #Disable.  By default this action sets environment variable is set to -D warnings.  We manage this in the Makefile
      - name: Setup build env
        run: |
          os=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')
          ./scripts/setup-$os.sh
        shell: bash
      - name: Build and load shims and wasi-demo-app
        shell: bash
        run: |
          make build
          make install
          make test-image
          make load
          make test-image/oci
          make load/oci
      - name: Run Benchmarks
        run: |
          set -o pipefail
          cargo bench -p containerd-shim-benchmarks -- --output-format bencher | tee output.txt
      # Download previous benchmark result from cache (if exists)
      - name: Cache benchmark data
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1.20.4
        with:
          name: Criterion.rs Benchmark
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # my experimental local benchmarking seems to have a 20% margin of error. 
          # So I set the alert threshold to 130% of the previous benchmark result.
          # If the current benchmark result is more than 130% of the previous benchmark result, it will fail.
          alert-threshold: '130%'
          fail-on-alert: true
          alert-comment-cc-users: '@runwasi-committers'
          # Enable Job Summary
          summary-always: true
          # Where the previous data file is stored
          external-data-json-path: ./cache/benchmark-data.json
      - name: Load wasi-http image
        shell: bash
        run: |
          make test-image/http
          make load/http
      - name: Start wasmtime shim
        shell: bash
        run: |
          sudo ctr run --rm --net-host --runtime=io.containerd.wasmtime.v1 ghcr.io/containerd/runwasi/wasi-http:latest wasi-http /wasi-http.wasm
      - name: Wait for wasmtime shim to start
        shell: bash
        run: |
          while ! curl -s http://127.0.0.1:8080 > /dev/null; do
            sleep 1
          done
      - name: Run hey benchmark
        shell: bash
        run: |
          hey -n 100000 -c 50 http://127.0.0.1:8080 > raw-output.txt
          python3 ./scripts/parse-hey.py raw-output.txt > benchmark-results.json
          cat benchmark-results.json
      - name: Report Throughput results
        uses: benchmark-action/github-action-benchmark@v1.20.4
        with:
          name: "HTTP Throughput"
          tool: "customBiggerIsBetter"
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          external-data-json-path: ./cache/benchmark-data.json
          summary-always: true
          alert-threshold: "120%"
          fail-on-alert: true
      - name: Report Latency results
        uses: benchmark-action/github-action-benchmark@v1.20.4
        with:
          name: "HTTP Latency"
          tool: "customSmallerIsBetter"
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          external-data-json-path: ./cache/benchmark-data.json
          summary-always: true
          alert-threshold: "130%"
          fail-on-alert: true
